<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Pay"> <!-- mapper네임스페이스명 설정 -->
	
	<!-- 주문 목록에 주문 추가 -->
	<insert id="pay_insert">
		insert into pay (pay_no,user_id,pay_price,pay_date,validity) 
		values(pay_no_seq.nextval,#{user_id},#{pay_price},sysdate,1)
	</insert>
	
	<!-- 장바구니 컬럼 업데이트 -->
	<update id="bs_update">
		update shopBasket set validity=2,pay_no= 
		(select pay_no from 
		(select pay_no from pay order by pay_no desc) 
		where rownum = 1)
		where basket_id=#{basket_id} and validity=#{validity}
	</update>
	
	<!-- 사용자 주문 내역 검색 -->
	<select id="pay_list" resultType="pay">
		select * from pay where user_id=#{user_id} order by pay_no desc
	</select>
	
	<!-- 사용자 주문 내역에따른 상품명 검색(basket 장바구니 -> 결제 확인 이전) -->
	<select id="getbasket_name" resultType="basket">
		select 
			LISTAGG(item_name,', ') 
			WITHIN GROUP (ORDER BY b.basket_no desc) 
			AS product_name
		from shopList l, shopBasket b 
		where 
			l.item_no = b.product_no
			and pay_no=#{pay_no}
		order by b.basket_no desc
	</select>
	
	<!-- 사용자 주문 내역에따른 상품명 검색(pay_ok 장바구니 -> 결제 확인 이후) -->
	<select id="getbasket_name2" resultType="payOK">
		select 
			LISTAGG(item_name,', ') 
			WITHIN GROUP (ORDER BY p.payCom_no desc) 
			AS product_name
		from shopList l, pay_ok p 
		where 
			l.item_no = p.product_no
			and pay_no=#{pay_no}
		order by p.payCom_no desc
	</select>
	
	
	<!--  /////////////////// 관리자 영역 ///////////////// -->
	
	
	
	<!-- 관리자 주문내역 목록 검색전후 레코드 개수 -->
	<select id="pay_admin_count" parameterType="pay"
		resultType="int">
		select count(pay_no) from pay
		<where>
			<if test="find_field == ''"></if>
			<if test="find_field == 'pay_no'">
				pay_no like #{find_name}
			</if>
			<if test="find_field == 'user_id'">
				user_id like #{find_name}
			</if>
		</where>
	</select>
	
	<!-- 관리자 주문내역 검색전후 목록 -->
	<select id="pay_admin_list" parameterType="pay" resultType="pay">
		select * from(
		select rowNum rNum,pay_no,user_id,pay_price,pay_date,validity from(
			select * from pay
			<where>
				<if test="find_field == ''"></if>
				<if test="find_field == 'pay_no'">
					pay_no like #{find_name}
				</if>
				<if test="find_field == 'user_id'">
					user_id like #{find_name}
				</if>
			</where>
			order by pay_no desc))
		where rNum &gt;= #{startrow} and rNum &lt;=#{endrow}
	</select>
	
	<!-- 관리자 주문 validity update-->
	<update id="pay_update">
		update pay set validity=#{validity} where pay_no=#{pay_no}
	</update>
	
	<!-- 테이블 복사. 장바구니 해당주문 validitiy=2 값을 pay_ok에 복사 -->
	<insert id="payok_copy">
		insert into pay_ok (payCom_no,payCom_id,product_no,basket_count,basket_page,pay_no)
		select basket_no,basket_id,product_no,basket_count,basket_page,pay_no from shopBasket 
		where pay_no=#{pay_no}
	</insert>
	
	<!-- 장바구니의 불필요한 정보 삭제(pay_ok에 옮겨간 정보) -->
	<delete id="bs_clean">
		delete from shopBasket where pay_no=#{pay_no}
	</delete>
	
	<!-- 주문 번호에 따른 구매완료 장바구니 목록 -->
	<select id="payok_list" resultType="payOK">
		select 
			p.payCom_no as payCom_no,
			p.payCom_id as payCom_id,
			l.item_no as product_no,
			l.item_name as product_name,
			l.item_img as product_img,
			p.basket_count as basket_count,
			l.item_stockCount as stockCount,
			l.item_price as price,
			(item_price * basket_count) sumPrice,
			basket_page
		from shopList l, pay_ok p 
		where 
			l.item_no = p.product_no
			and pay_no=#{pay_no}
		order by p.payCom_no desc
	</select>
	
	<!-- 결제완료 장바구니 금액 합산 -->
	<select id="payok_sumMoney" resultType="int">
		SELECT NVL(SUM(item_price * basket_count), 0) sumPrice 
		FROM pay_ok p, shopList l
		WHERE p.product_no = l.item_no and pay_no=#{pay_no} 
	</select>
	
	<!-- 주문 번호에 따른 상품 수량 조절 -->
	<update id="stock_change">
		update shopList
			set item_stockCount = item_stockCount-#{item_stockCount}
		where item_no = #{item_no}
	</update>
	
	<!-- 주문번호에 따른 주문내역 하나 가져오기 -->
	<select id="payList_one" resultType="pay">
		select * from pay where pay_no=#{pay_no}
	</select>
</mapper>




